
  {
	"swagger": "2.0",
	"info": {
		"title": "Cloud Storage",
		"description": "Stores and retrieves potentially large, immutable data objects.",
		"contact": {
			"name": "Google",
			"url": "https://google.com"
		},
		"version": "v1"
	},
	"host": "www.googleapis.com",
	"basePath": "/storage/v1",
	"schemes": ["http"],
	"produces": ["application/json"],
	"consumes": ["application/json"],
	"paths": {
		"/b": {
			"get": {
				"summary": "Get Buckets",
				"description": "Retrieves a list of buckets for a given project",
				"operationId": "storage.buckets.list",
				"parameters": [{
					"in": "query",
					"name": "maxResults",
					"description": "Maximum number of buckets to return in a single response"
				},
				{
					"in": "query",
					"name": "pageToken",
					"description": "A previously-returned page token representing part of the larger set of results to view"
				},
				{
					"in": "query",
					"name": "prefix",
					"description": "Filter results to buckets whose names begin with this prefix"
				},
				{
					"in": "query",
					"name": "project",
					"description": "A valid API project identifier"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket"]
			},
			"post": {
				"summary": "Create Bucket",
				"description": "Creates a new bucket",
				"operationId": "storage.buckets.insert",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "predefinedAcl",
					"description": "Apply a predefined set of access controls to this bucket"
				},
				{
					"in": "query",
					"name": "predefinedDefaultObjectAcl",
					"description": "Apply a predefined set of default object access controls to this bucket"
				},
				{
					"in": "query",
					"name": "project",
					"description": "A valid API project identifier"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket"]
			}
		},
		"/b/{bucket}": {
			"delete": {
				"summary": "Delete Bucket",
				"description": "Permanently deletes an empty bucket",
				"operationId": "storage.buckets.delete",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "If set, only deletes the bucket if its metageneration matches this value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "If set, only deletes the bucket if its metageneration does not match this value"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket"]
			},
			"get": {
				"summary": "Get Bucket",
				"description": "Returns metadata for the specified bucket",
				"operationId": "storage.buckets.get",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket"]
			},
			"patch": {
				"summary": "Update bucket",
				"description": "Updates a bucket",
				"operationId": "storage.buckets.patch",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "predefinedAcl",
					"description": "Apply a predefined set of access controls to this bucket"
				},
				{
					"in": "query",
					"name": "predefinedDefaultObjectAcl",
					"description": "Apply a predefined set of default object access controls to this bucket"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket"]
			},
			"put": {
				"summary": "Update bucket",
				"description": "Updates a bucket",
				"operationId": "storage.buckets.update",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "predefinedAcl",
					"description": "Apply a predefined set of access controls to this bucket"
				},
				{
					"in": "query",
					"name": "predefinedDefaultObjectAcl",
					"description": "Apply a predefined set of default object access controls to this bucket"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket"]
			}
		},
		"/b/{bucket}/acl": {
			"get": {
				"summary": "Get Bucket ACLs",
				"description": "Retrieves ACL entries on the specified bucket",
				"operationId": "storage.bucketAccessControls.list",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"post": {
				"summary": "Create Bucket ACL",
				"description": "Creates a new ACL entry on the specified bucket",
				"operationId": "storage.bucketAccessControls.insert",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			}
		},
		"/b/{bucket}/acl/{entity}": {
			"delete": {
				"summary": "Delete Bucket ACL",
				"description": "Permanently deletes the ACL entry for the specified entity on the specified bucket",
				"operationId": "storage.bucketAccessControls.delete",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"get": {
				"summary": "Get Bucket ACL",
				"description": "Returns the ACL entry for the specified entity on the specified bucket",
				"operationId": "storage.bucketAccessControls.get",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"patch": {
				"summary": "Update Bucket ACL",
				"description": "Updates an ACL entry on the specified bucket",
				"operationId": "storage.bucketAccessControls.patch",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"put": {
				"summary": "Update Bucket ACL",
				"description": "Updates an ACL entry on the specified bucket",
				"operationId": "storage.bucketAccessControls.update",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			}
		},
		"/b/{bucket}/defaultObjectAcl": {
			"get": {
				"summary": "Get Bucket Default ACL",
				"description": "Retrieves default object ACL entries on the specified bucket",
				"operationId": "storage.defaultObjectAccessControls.list",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "If present, only return default ACL listing if the bucket's current metageneration matches this value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "If present, only return default ACL listing if the bucket's current metageneration does not match the given value"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"post": {
				"summary": "Create Bucket Default ACL",
				"description": "Creates a new default object ACL entry on the specified bucket",
				"operationId": "storage.defaultObjectAccessControls.insert",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			}
		},
		"/b/{bucket}/defaultObjectAcl/{entity}": {
			"delete": {
				"summary": "Default Bucket Default ACL",
				"description": "Permanently deletes the default object ACL entry for the specified entity on the specified bucket",
				"operationId": "storage.defaultObjectAccessControls.delete",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"get": {
				"summary": "Get Bucket Default ACL",
				"description": "Returns the default object ACL entry for the specified entity on the specified bucket",
				"operationId": "storage.defaultObjectAccessControls.get",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"patch": {
				"summary": "Update Bucket Default ACL",
				"description": "Updates a default object ACL entry on the specified bucket",
				"operationId": "storage.defaultObjectAccessControls.patch",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			},
			"put": {
				"summary": "Update Bucket Default ACL",
				"description": "Updates a default object ACL entry on the specified bucket",
				"operationId": "storage.defaultObjectAccessControls.update",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket ACL"]
			}
		},
		"/b/{bucket}/iam": {
			"get": {
				"summary": "Get Bucket IAM",
				"description": "Returns an IAM policy for the specified bucket",
				"operationId": "storage.buckets.getIamPolicy",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket IAM"]
			},
			"put": {
				"summary": "Update Bucket IAM",
				"description": "Updates an IAM policy for the specified bucket",
				"operationId": "storage.buckets.setIamPolicy",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket IAM"]
			}
		},
		"/b/{bucket}/iam/testPermissions": {
			"get": {
				"summary": "Test Bucket IAM Permissions",
				"description": "Tests a set of permissions on the given bucket to see which, if any, are held by the caller",
				"operationId": "storage.buckets.testIamPermissions",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "permissions",
					"description": "Permissions to test"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Bucket IAM"]
			}
		},
		"/b/{bucket}/o": {
			"get": {
				"summary": "Get Objects",
				"description": "Retrieves a list of objects matching the criteria",
				"operationId": "storage.objects.list",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which to look for objects"
				},
				{
					"in": "query",
					"name": "delimiter",
					"description": "Returns results in a directory-like mode"
				},
				{
					"in": "query",
					"name": "maxResults",
					"description": "Maximum number of items plus prefixes to return in a single page of responses"
				},
				{
					"in": "query",
					"name": "pageToken",
					"description": "A previously-returned page token representing part of the larger set of results to view"
				},
				{
					"in": "query",
					"name": "prefix",
					"description": "Filter results to objects whose names begin with this prefix"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				},
				{
					"in": "query",
					"name": "versions",
					"description": "If true, lists all versions of an object as distinct results"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			},
			"post": {
				"summary": "Add New Object",
				"description": "Stores a new object and metadata",
				"operationId": "storage.objects.insert",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which to store the new object"
				},
				{
					"in": "query",
					"name": "contentEncoding",
					"description": "If set, sets the contentEncoding property of the final object to this value"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "name",
					"description": "Name of the object"
				},
				{
					"in": "query",
					"name": "predefinedAcl",
					"description": "Apply a predefined set of access controls to this object"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			}
		},
		"/b/{bucket}/o/watch": {
			"post": {
				"summary": "Update Object",
				"description": "Watch for changes on all objects in a bucket",
				"operationId": "storage.objects.watchAll",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which to look for objects"
				},
				{
					"in": "query",
					"name": "delimiter",
					"description": "Returns results in a directory-like mode"
				},
				{
					"in": "query",
					"name": "maxResults",
					"description": "Maximum number of items plus prefixes to return in a single page of responses"
				},
				{
					"in": "query",
					"name": "pageToken",
					"description": "A previously-returned page token representing part of the larger set of results to view"
				},
				{
					"in": "query",
					"name": "prefix",
					"description": "Filter results to objects whose names begin with this prefix"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				},
				{
					"in": "body",
					"name": "resource",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "versions",
					"description": "If true, lists all versions of an object as distinct results"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			}
		},
		"/b/{bucket}/o/{object}": {
			"delete": {
				"summary": "Delete Object",
				"description": "Deletes an object and its metadata",
				"operationId": "storage.objects.delete",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, permanently deletes a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration does not match the given value"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			},
			"get": {
				"summary": "Get Object",
				"description": "Retrieves an object or its metadata",
				"operationId": "storage.objects.get",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the object's generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration does not match the given value"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			},
			"patch": {
				"summary": "Update Object",
				"description": "Updates an object's metadata",
				"operationId": "storage.objects.patch",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration does not match the given value"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				},
				{
					"in": "query",
					"name": "predefinedAcl",
					"description": "Apply a predefined set of access controls to this object"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			},
			"put": {
				"summary": "Update Object",
				"description": "Updates an object's metadata",
				"operationId": "storage.objects.update",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration does not match the given value"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				},
				{
					"in": "query",
					"name": "predefinedAcl",
					"description": "Apply a predefined set of access controls to this object"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			}
		},
		"/b/{bucket}/o/{object}/acl": {
			"get": {
				"summary": "Get Object ACLs",
				"description": "Retrieves ACL entries on the specified object",
				"operationId": "storage.objectAccessControls.list",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object ACL"]
			},
			"post": {
				"summary": "Create Object ACL",
				"description": "Creates a new ACL entry on the specified object",
				"operationId": "storage.objectAccessControls.insert",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object ACL"]
			}
		},
		"/b/{bucket}/o/{object}/acl/{entity}": {
			"delete": {
				"summary": "Delete Object ACL",
				"description": "Permanently deletes the ACL entry for the specified entity on the specified object",
				"operationId": "storage.objectAccessControls.delete",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object ACL"]
			},
			"get": {
				"summary": "Get Object ACL",
				"description": "Returns the ACL entry for the specified entity on the specified object",
				"operationId": "storage.objectAccessControls.get",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object ACL"]
			},
			"patch": {
				"summary": "Update Object ACL",
				"description": "Updates an ACL entry on the specified object",
				"operationId": "storage.objectAccessControls.patch",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object ACL"]
			},
			"put": {
				"summary": "Update Object ACL",
				"description": "Updates an ACL entry on the specified object",
				"operationId": "storage.objectAccessControls.update",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of a bucket"
				},
				{
					"in": "path",
					"name": "entity",
					"description": "The entity holding the permission"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object ACL"]
			}
		},
		"/b/{bucket}/o/{object}/iam": {
			"get": {
				"summary": "Get Object IAM",
				"description": "Returns an IAM policy for the specified object",
				"operationId": "storage.objects.getIamPolicy",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object IAM"]
			},
			"put": {
				"summary": "Update Object IAM",
				"description": "Updates an IAM policy for the specified object",
				"operationId": "storage.objects.setIamPolicy",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object IAM"]
			}
		},
		"/b/{bucket}/o/{object}/iam/testPermissions": {
			"get": {
				"summary": "Test Object IAM Permissions",
				"description": "Tests a set of permissions on the given object to see which, if any, are held by the caller",
				"operationId": "storage.objects.testIamPermissions",
				"parameters": [{
					"in": "path",
					"name": "bucket",
					"description": "Name of the bucket in which the object resides"
				},
				{
					"in": "query",
					"name": "generation",
					"description": "If present, selects a specific revision of this object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "object",
					"description": "Name of the object"
				},
				{
					"in": "query",
					"name": "permissions",
					"description": "Permissions to test"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object IAM"]
			}
		},
		"/b/{destinationBucket}/o/{destinationObject}/compose": {
			"post": {
				"summary": "Concatenate Objects",
				"description": "Concatenates a list of existing objects into a new object in the same bucket",
				"operationId": "storage.objects.compose",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "destinationBucket",
					"description": "Name of the bucket in which to store the new object"
				},
				{
					"in": "path",
					"name": "destinationObject",
					"description": "Name of the new object"
				},
				{
					"in": "query",
					"name": "destinationPredefinedAcl",
					"description": "Apply a predefined set of access controls to the destination object"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the object's current metageneration matches the given value"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			}
		},
		"/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}": {
			"post": {
				"summary": "Copy Object",
				"description": "Copies a source object to a destination object",
				"operationId": "storage.objects.copy",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "destinationBucket",
					"description": "Name of the bucket in which to store the new object"
				},
				{
					"in": "path",
					"name": "destinationObject",
					"description": "Name of the new object"
				},
				{
					"in": "query",
					"name": "destinationPredefinedAcl",
					"description": "Apply a predefined set of access controls to the destination object"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the destination object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the destination object's current generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the destination object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the destination object's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "ifSourceGenerationMatch",
					"description": "Makes the operation conditional on whether the source object's generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifSourceGenerationNotMatch",
					"description": "Makes the operation conditional on whether the source object's generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifSourceMetagenerationMatch",
					"description": "Makes the operation conditional on whether the source object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifSourceMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the source object's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				},
				{
					"in": "path",
					"name": "sourceBucket",
					"description": "Name of the bucket in which to find the source object"
				},
				{
					"in": "query",
					"name": "sourceGeneration",
					"description": "If present, selects a specific revision of the source object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "sourceObject",
					"description": "Name of the source object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			}
		},
		"/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}": {
			"post": {
				"summary": "Rewrite Object",
				"description": "Rewrites a source object to a destination object",
				"operationId": "storage.objects.rewrite",
				"parameters": [{
					"in": "body",
					"name": "body",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "destinationBucket",
					"description": "Name of the bucket in which to store the new object"
				},
				{
					"in": "path",
					"name": "destinationObject",
					"description": "Name of the new object"
				},
				{
					"in": "query",
					"name": "destinationPredefinedAcl",
					"description": "Apply a predefined set of access controls to the destination object"
				},
				{
					"in": "query",
					"name": "ifGenerationMatch",
					"description": "Makes the operation conditional on whether the destination object's current generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifGenerationNotMatch",
					"description": "Makes the operation conditional on whether the destination object's current generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationMatch",
					"description": "Makes the operation conditional on whether the destination object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the destination object's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "ifSourceGenerationMatch",
					"description": "Makes the operation conditional on whether the source object's generation matches the given value"
				},
				{
					"in": "query",
					"name": "ifSourceGenerationNotMatch",
					"description": "Makes the operation conditional on whether the source object's generation does not match the given value"
				},
				{
					"in": "query",
					"name": "ifSourceMetagenerationMatch",
					"description": "Makes the operation conditional on whether the source object's current metageneration matches the given value"
				},
				{
					"in": "query",
					"name": "ifSourceMetagenerationNotMatch",
					"description": "Makes the operation conditional on whether the source object's current metageneration does not match the given value"
				},
				{
					"in": "query",
					"name": "maxBytesRewrittenPerCall",
					"description": "The maximum number of bytes that will be rewritten per rewrite request"
				},
				{
					"in": "query",
					"name": "projection",
					"description": "Set of properties to return"
				},
				{
					"in": "query",
					"name": "rewriteToken",
					"description": "Include this field (from the previous rewrite response) on each rewrite request after the first one, until the rewrite response 'done' flag is true"
				},
				{
					"in": "path",
					"name": "sourceBucket",
					"description": "Name of the bucket in which to find the source object"
				},
				{
					"in": "query",
					"name": "sourceGeneration",
					"description": "If present, selects a specific revision of the source object (as opposed to the latest version, the default)"
				},
				{
					"in": "path",
					"name": "sourceObject",
					"description": "Name of the source object"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Object"]
			}
		},
		"/channels/stop": {
			"post": {
				"summary": "Stop Watching Channel",
				"description": "Stop watching resources through this channel",
				"operationId": "storage.channels.stop",
				"parameters": [{
					"in": "body",
					"name": "resource",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Channel"]
			}
		}
	},
	"definitions": {
		"Bucket": {
			"properties": {
				"acl": {
					"description": "This is a default description.",
					"type": "post"
				},
				"cors": {
					"description": "This is a default description.",
					"type": "post"
				},
				"defaultObjectAcl": {
					"description": "This is a default description.",
					"type": "post"
				},
				"etag": {
					"description": "This is a default description.",
					"type": "post"
				},
				"id": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"lifecycle": {
					"description": "This is a default description.",
					"type": "post"
				},
				"location": {
					"description": "This is a default description.",
					"type": "post"
				},
				"logging": {
					"description": "This is a default description.",
					"type": "post"
				},
				"metageneration": {
					"description": "This is a default description.",
					"type": "post"
				},
				"name": {
					"description": "This is a default description.",
					"type": "post"
				},
				"owner": {
					"description": "This is a default description.",
					"type": "post"
				},
				"projectNumber": {
					"description": "This is a default description.",
					"type": "post"
				},
				"selfLink": {
					"description": "This is a default description.",
					"type": "post"
				},
				"storageClass": {
					"description": "This is a default description.",
					"type": "post"
				},
				"timeCreated": {
					"description": "This is a default description.",
					"type": "post"
				},
				"updated": {
					"description": "This is a default description.",
					"type": "post"
				},
				"versioning": {
					"description": "This is a default description.",
					"type": "post"
				},
				"website": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"BucketAccessControl": {
			"properties": {
				"bucket": {
					"description": "This is a default description.",
					"type": "post"
				},
				"domain": {
					"description": "This is a default description.",
					"type": "post"
				},
				"email": {
					"description": "This is a default description.",
					"type": "post"
				},
				"entity": {
					"description": "This is a default description.",
					"type": "post"
				},
				"entityId": {
					"description": "This is a default description.",
					"type": "post"
				},
				"etag": {
					"description": "This is a default description.",
					"type": "post"
				},
				"id": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"projectTeam": {
					"description": "This is a default description.",
					"type": "post"
				},
				"role": {
					"description": "This is a default description.",
					"type": "post"
				},
				"selfLink": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"BucketAccessControls": {
			"properties": {
				"items": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"Buckets": {
			"properties": {
				"items": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"nextPageToken": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"Channel": {
			"properties": {
				"address": {
					"description": "This is a default description.",
					"type": "post"
				},
				"expiration": {
					"description": "This is a default description.",
					"type": "post"
				},
				"id": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"params": {
					"description": "This is a default description.",
					"type": "post"
				},
				"payload": {
					"description": "This is a default description.",
					"type": "post"
				},
				"resourceId": {
					"description": "This is a default description.",
					"type": "post"
				},
				"resourceUri": {
					"description": "This is a default description.",
					"type": "post"
				},
				"token": {
					"description": "This is a default description.",
					"type": "post"
				},
				"type": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"ComposeRequest": {
			"properties": {
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"sourceObjects": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"Object": {
			"properties": {
				"acl": {
					"description": "This is a default description.",
					"type": "post"
				},
				"bucket": {
					"description": "This is a default description.",
					"type": "post"
				},
				"cacheControl": {
					"description": "This is a default description.",
					"type": "post"
				},
				"componentCount": {
					"description": "This is a default description.",
					"type": "post"
				},
				"contentDisposition": {
					"description": "This is a default description.",
					"type": "post"
				},
				"contentEncoding": {
					"description": "This is a default description.",
					"type": "post"
				},
				"contentLanguage": {
					"description": "This is a default description.",
					"type": "post"
				},
				"contentType": {
					"description": "This is a default description.",
					"type": "post"
				},
				"crc32c": {
					"description": "This is a default description.",
					"type": "post"
				},
				"customerEncryption": {
					"description": "This is a default description.",
					"type": "post"
				},
				"etag": {
					"description": "This is a default description.",
					"type": "post"
				},
				"generation": {
					"description": "This is a default description.",
					"type": "post"
				},
				"id": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"md5Hash": {
					"description": "This is a default description.",
					"type": "post"
				},
				"mediaLink": {
					"description": "This is a default description.",
					"type": "post"
				},
				"metadata": {
					"description": "This is a default description.",
					"type": "post"
				},
				"metageneration": {
					"description": "This is a default description.",
					"type": "post"
				},
				"name": {
					"description": "This is a default description.",
					"type": "post"
				},
				"owner": {
					"description": "This is a default description.",
					"type": "post"
				},
				"selfLink": {
					"description": "This is a default description.",
					"type": "post"
				},
				"size": {
					"description": "This is a default description.",
					"type": "post"
				},
				"storageClass": {
					"description": "This is a default description.",
					"type": "post"
				},
				"timeCreated": {
					"description": "This is a default description.",
					"type": "post"
				},
				"timeDeleted": {
					"description": "This is a default description.",
					"type": "post"
				},
				"timeStorageClassUpdated": {
					"description": "This is a default description.",
					"type": "post"
				},
				"updated": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"ObjectAccessControl": {
			"properties": {
				"bucket": {
					"description": "This is a default description.",
					"type": "post"
				},
				"domain": {
					"description": "This is a default description.",
					"type": "post"
				},
				"email": {
					"description": "This is a default description.",
					"type": "post"
				},
				"entity": {
					"description": "This is a default description.",
					"type": "post"
				},
				"entityId": {
					"description": "This is a default description.",
					"type": "post"
				},
				"etag": {
					"description": "This is a default description.",
					"type": "post"
				},
				"generation": {
					"description": "This is a default description.",
					"type": "post"
				},
				"id": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"object": {
					"description": "This is a default description.",
					"type": "post"
				},
				"projectTeam": {
					"description": "This is a default description.",
					"type": "post"
				},
				"role": {
					"description": "This is a default description.",
					"type": "post"
				},
				"selfLink": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"ObjectAccessControls": {
			"properties": {
				"items": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"Objects": {
			"properties": {
				"items": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"nextPageToken": {
					"description": "This is a default description.",
					"type": "post"
				},
				"prefixes": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"Policy": {
			"properties": {
				"bindings": {
					"description": "This is a default description.",
					"type": "post"
				},
				"etag": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"resourceId": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"RewriteResponse": {
			"properties": {
				"done": {
					"description": "This is a default description.",
					"type": "post"
				},
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"objectSize": {
					"description": "This is a default description.",
					"type": "post"
				},
				"rewriteToken": {
					"description": "This is a default description.",
					"type": "post"
				},
				"totalBytesRewritten": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		},
		"TestIamPermissionsResponse": {
			"properties": {
				"kind": {
					"description": "This is a default description.",
					"type": "post"
				},
				"permissions": {
					"description": "This is a default description.",
					"type": "post"
				}
			}
		}
	}
}